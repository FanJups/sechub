package com.mercedesbenz.sechub.systemtest.runtime;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.mercedesbenz.sechub.api.ExecutionProfileCreate;
import com.mercedesbenz.sechub.api.Project;
import com.mercedesbenz.sechub.api.SecHubClient;
import com.mercedesbenz.sechub.api.SecHubClientException;
import com.mercedesbenz.sechub.systemtest.config.ProjectDefinition;
import com.mercedesbenz.sechub.systemtest.config.SecHubConfigurationDefinition;
import com.mercedesbenz.sechub.systemtest.config.SecHubExecutorConfigDefinition;

public class SystemTestRuntimeProductConfigurator {

    private static final Logger LOG = LoggerFactory.getLogger(SystemTestRuntimeProductConfigurator.class);

    public void applyConfigurationWhenLocal(SystemTestRuntimeContext context) throws SecHubClientException {
        if (!context.isLocalRun()) {
            return;
        }
        if (!context.isLocalSecHubConfigured()) {
            return;
        }

        addProjects(context);
        assignAdminAsUserToProjects(context);
        createExecutorsAndProfiles(context);

    }

    private void createExecutorsAndProfiles(SystemTestRuntimeContext context) throws SecHubClientException {
        SecHubConfigurationDefinition config = context.getLocalSecHubConfigurationOrFail();

        SecHubClient client = context.getLocalAdminSecHubClient();

        List<SecHubExecutorConfigDefinition> executors = config.getExecutors();

        for (SecHubExecutorConfigDefinition executorDefinition : executors) {
            String profileId = executorDefinition.getProfile();
            ExecutionProfileCreate profile = new ExecutionProfileCreate();
            profile.setEnabled(true);
            List<String> projectIdsForThisProfile = new ArrayList<>();
            for (ProjectDefinition projectDefinition : config.getProjects().get()) {
                if (projectDefinition.getProfiles().contains(profileId)) {
                    projectIdsForThisProfile.add(projectDefinition.getName());
                }
            }
            profile.setProjectIds(projectIdsForThisProfile);
            profile.setDescription("Generated by system test framework");

            if (context.isDryRun()) {
                LOG.info("Dry run: create profile '{}' is skipped", profileId);
                continue;
            }
            client.createExecutionProfile(profileId, profile);
        }

        // the configuration contains no profile elements, but only executors
        // to remember the executor config uuids for the profiles we use this map
        Map<String, List<UUID>> profileToExecutorConfigUUIDS = new TreeMap<>();
        /* FIXME Albert Tregnaghi, 2023-04-21:implement executors and map to profiles */
    }

    private void assignAdminAsUserToProjects(SystemTestRuntimeContext context) throws SecHubClientException {
        SecHubConfigurationDefinition config = context.getLocalSecHubConfigurationOrFail();
        if (config.getProjects().isEmpty()) {
            return;
        }

        SecHubClient client = context.getLocalAdminSecHubClient();
        String userId = client.getUsername();
        for (ProjectDefinition projectDefinition : config.getProjects().get()) {
            String projectid = projectDefinition.getName();
            if (context.isDryRun()) {
                LOG.info("Dry run: assign user '{}' to project '{}' is skipped", userId, projectid);
                continue;
            }
            if (client.isUserAssignedToProject(userId, projectid)) {
                LOG.warn("User '{}' is already assigned to project '{}' - skip assignment", userId, projectid);
            } else {
                client.assignUserToProject(userId, projectid);
            }

        }
    }

    private void addProjects(SystemTestRuntimeContext context) throws SecHubClientException {
        SecHubConfigurationDefinition config = context.getLocalSecHubConfigurationOrFail();
        if (config.getProjects().isEmpty()) {
            LOG.warn("No project defined - skip project configuration. Should only happen when only PDS is tested without SecHub.");
            return;
        }

        for (ProjectDefinition projectDefinition : config.getProjects().get()) {
            String projectName = projectDefinition.getName();

            SecHubClient client = context.getLocalAdminSecHubClient();

            if (context.isDryRun()) {
                LOG.info("Dry run: create project '{}' is skipped", projectName);
                continue;
            }
            if (client.isProjectExisting(projectName)) {
                LOG.warn("Project '{}' does already exist - skip creation", projectName);
                continue;
            }
            Project project = new Project();
            project.setApiVersion("1.0");
            project.setDescription("Test project");
            project.setName(projectName);
            project.setOwner(client.getUsername());// we use the administrator as owner of the project

            client.createProject(project);
        }
    }

}
